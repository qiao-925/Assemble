瀑布流（规模事件应用1985）→ 迭代（2000）→敏捷价值观（2001）随之实现Scrum & XP

敏捷基于迭代

https://en.wikipedia.org/wiki/Waterfall_model

# 瀑布流

- **建筑和制造业“线性顺序”作业流程启发**， 1970年计算机科学家温斯顿·罗伊斯引入到软件工程领域
- 一系列严格顺序的阶段：需求分析、系统设计、程序设计、编码实现、测试和维护。**每个阶段必须先完成才能开始，并且阶段之间没有反馈或迭代。**
    - 一方面，这种规则带来更低的灵活性。
    - **另一方面，它迫使每个阶段的质量不得不提高。从而避免了大量返工，穷查理宝典“工作一次做好”**
- 意义：重要的里程碑。其缺点促进了迭代，敏捷的兴起。**“天下万物生于有，有生于无” 品 ～**
- 问题：该模式难以应对**需求的变化（**思想潮流的变化**）**。
    - **先有目的地再出发（适合）**
    - 先出发再寻找目的地：迭代，敏捷所擅长的

# 迭代

MVP版本，最小可行性验证

# 敏捷价值观

https://en.wikipedia.org/wiki/Agile_software_development

## **敏捷宣言**

- 个体和互动高于流程和工具
- 可工作的软件优于详尽的文档
- 客户协作优先于合同谈判
- 响应变化而非遵循计划

## 精益求精——**软件工艺**

https://en.wikipedia.org/wiki/Software_craftsmanship

https://manifesto.softwarecraftsmanship.org/

## **提高标准**

作为有理想的软件工匠，我们一直身体力行，提升专业软件开发的标准，并帮助他人学习此工艺。通过这些工作，我们建立了如下价值观：

不仅要让软件工作，

更要 **精益求精**

不仅要响应变化，

更要 **稳步增加价值**

不仅要有个体与交互，

更要 **形成专业人员的社区**

不仅要与客户合作，

更要 **建立卓有成效的伙伴关系**

也就是说，左项固然值得追求，右项同样不可或缺。

## 敏捷陷阱

**缺乏整体产品设计 —— 整体产品设计的平衡（计划速度 & 迭代速度）**

敏捷软件开发的目标是更多地关注生产可运行的软件，而不是文档。这与瀑布模型形成对比，瀑布模型的流程通常受到严格控制，系统的微小变更都需要对支持文档进行大量修订。然而，这并不意味着完全不进行任何分析或设计。**不重视设计可能会导致团队一开始进展迅速，但在尝试扩展系统时却需要进行大量返工。**敏捷软件开发的关键特性之一是迭代性。如果操作得当，敏捷软件开发可以让设计在系统开发过程中逐渐显现，并帮助团队发现共性和可复用的机会。

**每日站立会议中的问题解决 —— 会议效率优化[形式和质量的平衡]**

每日站立会议应该是一次专注、及时的会议，所有团队成员都应该在会议中传播信息。即使需要解决问题，通常也只有部分团队成员参与，这可能并非对整个团队时间的最佳利用。如果在每日站立会议期间，团队开始深入讨论问题，则应将其搁置，直到子团队能够讨论为止，通常是在站立会议结束后立即进行。

**允许技术债务累积 —— 技术债和迭代速度的平衡**

专注于交付新功能可能会导致技术债务增加。团队必须留出时间进行缺陷修复和重构。

技术债务会增加计划外的工作量，因为生产缺陷会分散团队的注意力，阻碍其进一步发展。

随着系统的发展，重构至关重要。

随着时间的推移，**缺乏持续维护会导致缺陷和开发成本增加。**

**试图在迭代中承担过多任务 —— 排期的平衡，质量与效率的平衡**

一个常见的误解是敏捷软件开发允许持续变更，然而，迭代待办事项列表（backlog）是对迭代期间可以完成哪些工作的约定。[118] 过多的在制品 (WIP) 会导致效率低下，例如上下文切换和排队。[119]团队必须避免迫于压力而承担额外的工作。[120]

**开发人员倦怠 —— 人员可持续发展的考量，一张一弛**

由于敏捷实践的专注节奏和持续性，交付团队成员的倦怠风险较高。[[122]](https://en.wikipedia.org/wiki/Agile_software_development#cite_note-122)

## **敏捷实现**

### Scrum

[https://en.wikipedia.org/wiki/Scrum_(software_development)](https://en.wikipedia.org/wiki/Scrum_(software_development))

- 敏捷团队协作框架
- Focus：团队工作流
- 形式
    - Sprint冲刺（约2周）
    - 每日站会
    - 待办事件细化
    - 反馈会议
    - 燃尽图

### XP

https://en.wikipedia.org/wiki/Extreme_programming

- 软件开发方法：短周期频繁发布版本，提高生产力引入检查点，以便采纳新的客户需求。
- Focus ：响应客户
- 极限在哪？
    - 将代码审查推到极致
        - 测试驱动开发TDD
- 价值观
    - 沟通
    - 简单
        - 专注于满足当前的需求，而不是明天、下周或下个月的需求【存在争议】
    - 反馈
        - 测试：单元，集成测试
        - 客户和测试人员共同编写验收测试，2～3周参与一次，以便客户掌握开发进度
        - 团队：评估客户需求
    - 勇气
        - **避免过度设计**： 程序员应避免为未来（“明天”）设计和编码，而是专注于满足当前需求，防止陷入过度设计的泥潭。【平衡】
            - 设计泥潭和适度设计 的 平衡之术
        - **代码重构**： 程序员应有信心和勇气在必要时重构代码，改进现有系统，以便更容易地进行未来的更改 [5]。
        - **丢弃过时代码**： 即使花费了大量精力，程序员也应有勇气删除不再需要的过时代码。
        - **坚持不懈**： 面对复杂问题时，程序员需要坚持不懈，即使长时间的努力没有立即见效，也要相信最终能够找到解决方案。
    - 尊重
        
        [尊重，来源GPT扩展补充](https://www.notion.so/GPT-2116c2e8d0dd80f882d8d99c70db0183?pvs=21)
        
- 12种实践
    
    <aside>
    💡
    
    极限编程被描述为具有 12 种实践，分为四个领域：
    
    **精细反馈[[编辑](https://en.wikipedia.org/w/index.php?title=Extreme_programming&action=edit&section=23)]**
    
    - [结对编程](https://en.wikipedia.org/wiki/Pair_programming)
    - [规划游戏](https://en.wikipedia.org/wiki/Planning_game)
    - [测试驱动开发](https://en.wikipedia.org/wiki/Test-driven_development)
    - [整个团队](https://en.wikipedia.org/wiki/Extreme_programming_practices#Whole_team)
    
    **连续过程[[编辑](https://en.wikipedia.org/w/index.php?title=Extreme_programming&action=edit&section=24)]**
    
    - [持续集成](https://en.wikipedia.org/wiki/Continuous_integration)
    - [重构](https://en.wikipedia.org/wiki/Refactoring)或设计改进
    - [小规模发布](https://en.wikipedia.org/wiki/Extreme_programming_practices#Small_releases)
    
    **共享理解[[编辑](https://en.wikipedia.org/w/index.php?title=Extreme_programming&action=edit&section=25)]**
    
    - [编码标准](https://en.wikipedia.org/wiki/Extreme_programming_practices#Coding_standard)
    - [集体代码所有权](https://en.wikipedia.org/wiki/Extreme_programming_practices#Collective_code_ownership)
    - [简约设计](https://en.wikipedia.org/wiki/Extreme_programming_practices#Simple_design)
    - [系统隐喻](https://en.wikipedia.org/wiki/Extreme_programming_practices#System_metaphor)
    
    **程序员福利[[编辑](https://en.wikipedia.org/w/index.php?title=Extreme_programming&action=edit&section=26)]**
    
    - [可持续的步伐](https://en.wikipedia.org/wiki/Extreme_programming_practices#Sustainable_pace)
    </aside>


    落地实践统计？

目前还有其他流行的吗？

做一个系统性的总结归纳！