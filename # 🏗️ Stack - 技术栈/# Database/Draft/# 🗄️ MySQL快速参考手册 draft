# 🗄️ MySQL快速参考手册

## 🏗️ 表设计原则

### 三大范式
1. **第一范式**：每一列都不能再分（不能有逗号分隔的值）
2. **第二范式**：每一列都必须依赖表的主键
3. **第三范式**：每一列都不能传递依赖其他非主键的列

### 范式与反范式的权衡 —— 数据冗余的取舍
- **范式设计**：最小冗余，数据一致性高
- **反范式设计**：在特定业务场景下，适当冗余数据以满足性能需求

## 🔌 存储引擎架构

### 插件式架构特点
- MySQL采用**插件式架构**，支持多种存储引擎
- 存储引擎基于**表级别**，而非数据库级别
- 可为不同表设置不同存储引擎

### 主流存储引擎对比
| 特性 | InnoDB | MyISAM |
|------|--------|--------|
| **事务支持** | ✅ 支持 | ❌ 不支持 |
| **锁粒度** | 行锁 | 表锁 |
| **应用场景** | 事务性应用 | 读密集型应用 |

---

## 🎯 索引机制详解

### 核心思想
**空间换时间** - 通过额外的存储空间换取查询性能的提升

### 索引分类

#### 1. 应用维度（字段结构）
- **主键索引**：唯一标识，自动创建
- **普通索引**：加速查询
- **唯一索引**：加速查询 + 列值唯一（允许NULL）
- **联合索引**：多列组合索引

#### 2. 存储方式
- **聚簇索引**：数据和索引存储在一起
- **非聚簇索引**：数据和索引分离存储，类似书的目录和具体的内容

> 💡 **MySQL特点**：主键使用聚簇索引，非主键列使用非聚簇索引

### 索引失效情况
- ❌ `WHERE`子句中使用函数
- ❌ 查询条件使用`OR`
- ❌ `LIKE`查询以`%`开头

---

## 📝 日志系统

### 核心日志类型
| 日志类型 | 作用 | 应用场景 |
|----------|------|----------|
| **慢查询日志** | 记录执行时间过长的SQL | 性能分析 |
| **Binlog** | 记录数据库修改操作 | 数据恢复、主从复制、审计 |
| **Undo Log** | 事务回滚支持 | 保证事务原子性 |
| **Redo Log** | 事务持久化保证 | 保证事务持久性 |

MySQL InnoDB 引擎使用 **redo log(重做日志)** 保证事务的**持久性**，使用 **undo log(回滚日志)** 来保证事务的**原子性**。
MySQL 数据库的**数据备份、主备、主主、主从**都离不开 binlog，需要依靠 binlog 来同步数据，保证数据一致性。

### 业务开发建议
> 💡 对于业务开发，通常使用MyBatis的日志功能进行问题排查

---

## ⚡ 性能优化策略

### 优化思路
1. **从慢SQL开始**：识别性能瓶颈
2. **Explain执行计划分析**：理解SQL执行过程
3. **三方面优化**：表结构、索引、SQL语句

### 架构层面优化
- **数据库读写分离**：主从架构，读写负载分散
- **应用程序缓存机制**：减少数据库访问压力

---

## 🔗 参考资料
- [MySQL官方文档](https://dev.mysql.com/doc/)
- [JavaGuide MySQL教程](https://javaguide.cn/database/mysql/)
- [📊 MySQL版本应用情况与流行程度分析](./# 📊 MySQL版本应用情况与流行程度分析.md) - 各版本特性对比与选择建议
