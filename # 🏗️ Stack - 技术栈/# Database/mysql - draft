# **MySQL和PostgreSQL的区别？**

**数据量级：** MySQL通常通常用于处理中小规模数据，PostgreSQL可以用来处理大规模数据
**写入性能:** PostgreSQL优于MySQL
**复杂数据类型：** 如对JSON的操作语法支持更加强大，对比mysql

# 1. 表设计

**三大范式是什么**

- 每一列都不能再分（不能有逗号分隔的值）
- 每一列都必须依赖表的主键
- 每一列都不能传递依赖其他非主键的列（拆两个表）

**范式和反范式设计**

数据冗余的取舍
范式：最小冗余
反范式： 在一些业务场景下，可能需要冗余一部分的数据来满足当前的需求

# 3. 插件式 —— 存储引擎

**MySQL 存储引擎架构**

MySQL 存储引擎采用的是 **插件式架构** ，支持多种存储引擎，甚至可以为不同的数据库表设置不同的存储引擎以适应不同场景的需要。**存储引擎是基于表的，而不是数据库。**

**MyISAM和 InnoDB的区别？**
InnoDB支持事务，行锁
MyISAM不支持事务，表锁

# 4. 索引

核心思想：空间换时间

## **索引分类**

**1.【应用维度】字段结构**

- 主键索引
- 普通索引
- 唯一索引：加速查询 + 列值唯一（可以有 NULL）
- 联合索引

**2.【存储方式】 聚簇索引与非聚簇索引区别？**

聚簇索引：数据和索引是放在一块的
非聚簇索引：分开放，类似书的目录和具体的内容

MySQL使用的是混合索引的方式，**主键使用聚簇索引，非主键列使用非聚簇索引**

**3. 【数据结构】**MySQL主要使用B+树来作为索引结构。适用于范围查询和全表扫描。

**B树的结构优势在哪里？ 1995年，MySQL 1.0发布，MyISAM使用B树作为索引存储结构**

树高度！

相对于二叉树，B树的每个节点可有多个子节点，树的高度，层级降低进而带来搜索IO次数的降低。

**B+树相对于B树的优势？ 2001年，引入InnoDB,使用B+树作为索引存储结构**

结构变化：只有最底下一层叶子节点存储数据。

优势：

- 树高度：节点所挂载的子节点更多了，进一步降低树高度，降低IO
- 叶子节点形成有序链表，使范围查询更加高效。
    - 找到范围起始位置，B+树直接顺序遍历即可实现范围查询。
    - 找到范围起始位置，B树仍需通过中序遍历。

## 树的总结

最后，总结一下各种树解决的问题以及面临的新问题：

- **二叉查找树(BST)** ：解决了排序的基本问题，但是由于无法保证平衡，可能退化为链表；
- **平衡二叉树(AVL)** ：通过旋转解决了平衡的问题，但是旋转操作效率太低；
- **红黑树** ：通过舍弃严格的平衡和引入红黑节点，解决了 AVL 旋转效率过低的问题，但是在磁盘等场景下，树仍然太高，IO 次数太多；
- **B 树** ：通过将二叉树改为多路平衡查找树，解决了树过高的问题；
- **B+树** ：在 B 树的基础上，将非叶节点改造为不存储数据的纯索引节点，进一步降低了树的高度；此外将叶节点使用指针连接成链表，范围查询更加高效。

## **索引失效情况**

- where中使用函数
- 查询条件使用OR
- like查询以%开头

**11. 聚簇索引与非聚簇索引区别？**

聚簇索引：数据和索引是放在一块的
非聚簇索引：分开放，类似书的目录和具体的内容

MySQL使用的是混合索引的方式，主键使用聚簇索引，非主键列使用非聚簇索引

**12. MySQL索引失效情况？**

- like查询%放前面
- where后面使用函数
- 使用or条件

**13. B树和B+树区别？**

- 数据分布：B树所有的节点都包含数据，B+树只有叶子节点包含数据
- 查询性能：B树对单个节点的查询效率高，B+树对范围查询效率高
- 写入操作：B+树只需要操作叶子结点，B树需要维护节点的平衡性，更加复杂

MySQL主要使用B+树来作为索引结构。

# 5. 日志

- 慢查询
- binlog：记录数据库修改的SQL，用于数据恢复，主从复制，审计
    - 对于业务开发，通常使用mybatis 的log用于排查
- UNDO LOG
- REDO LOG

MySQL InnoDB 引擎使用 **redo log(重做日志)** 保证事务的**持久性**，使用 **undo log(回滚日志)** 来保证事务的**原子性**。

MySQL 数据库的**数据备份、主备、主主、主从**都离不开 binlog，需要依靠 binlog 来同步数据，保证数据一致性。

## [参考](https://www.notion.so/MySQL-12a6c2e8d0dd807daa44d3c491afefe3?pvs=21)

---

著作权归JavaGuide(javaguide.cn)所有
基于MIT协议
原文链接：https://javaguide.cn/database/mysql/mysql-logs.html

# 6. 性能优化思路

从慢SQL开始，对Explain执行计划分析

从3个方面考虑优化：表结构，索引，SQL

整体架构优化：数据库读写分离，应用程序缓存机制