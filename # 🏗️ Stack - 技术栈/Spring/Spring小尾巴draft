- Spring官方文档通读！

spring主题，处理微信收藏夹

## 观察bean生命周期如何“攘外安内”
# 1 `# “自给自足” —— Spring本身使用bean生命周期完成了哪些已有功能的构建`

结合源码看的话，最好用cursor克隆spring repo

好的，我完全理解您的意思了！这是一个非常棒的建议，将功能介绍、设计思想、实现原理和代码示例（如果合适）结合起来，会使解释更加清晰和易于理解。

- 校验注解源码
    
    BeanPostProcessor 其实有很多经典的应用，我在写文章的时候，想到一个地方，就是我们在 SpringMVC 中做数据验证的时候，往往只需要加几个注解就可以了，那么这个注解是在哪里进行的校验的呢？就是 BeanPostProcessor，我们来看一眼源码：
    
    ```java
    public class BeanValidationPostProcessor implements BeanPostProcessor, InitializingBean {
    
     @Nullable
     private Validator validator;
    
     private boolean afterInitialization = false;
    
     public void setAfterInitialization(boolean afterInitialization) {
      this.afterInitialization = afterInitialization;
     }
    
     @Override
     public void afterPropertiesSet() {
      if (this.validator == null) {
       this.validator = Validation.buildDefaultValidatorFactory().getValidator();
      }
     }
     **@Override
     public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
      if (!this.afterInitialization) {
       doValidate(bean);
      }
      return bean;
     }
     @Override
     public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
      if (this.afterInitialization) {
       doValidate(bean);
      }
      return bean;
     }**
     /**
      * Perform validation of the given bean.
      * @param bean the bean instance to validate
      * @see jakarta.validation.Validator#validate
      */
     protected void doValidate(Object bean) {
            //...
     }
    
    }
    ```
    

# 2 三方应用使用bean生命周期通常会有哪些扩展实践

MQ测试环境隔离，通过beanPostProcessor修改consumer配置

## 

# 

# 

---